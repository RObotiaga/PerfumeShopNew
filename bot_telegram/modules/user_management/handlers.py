# bot_telegram/modules/user_management/handlers.py
import logging
import datetime

from aiogram import Router, F, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery  # CallbackQuery —É–∂–µ –±—ã–ª, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–µ–µ

from app.database import AsyncSheetServiceWithQueue, User
from bot_telegram.states.user_interaction_states import UserAgreement, CatalogNavigation  # –î–û–ë–ê–í–õ–ï–ù CatalogNavigation
from .keyboards import get_agreement_keyboard, get_main_menu_keyboard
from bot_telegram.utils.callback_data_factory import UserAgreementCallback, \
    NavigationCallback  # –î–û–ë–ê–í–õ–ï–ù NavigationCallback

logger = logging.getLogger(__name__)
user_router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_or_edit_main_menu(message_or_query: Message | CallbackQuery, state: FSMContext, text: str | None = None):
    user_full_name = message_or_query.from_user.full_name
    if text is None:
        text = f"{user_full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!"

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    # current_state = await state.get_state()
    # if current_state is not None: # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —ç—Ç–æ —Ç–æ–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()  # –ü–æ–∫–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–º –≤—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    if isinstance(message_or_query, Message):
        await message_or_query.answer(text, reply_markup=get_main_menu_keyboard())
    elif isinstance(message_or_query, CallbackQuery):
        if message_or_query.message:
            try:
                await message_or_query.message.edit_text(text, reply_markup=get_main_menu_keyboard())
            except Exception:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await message_or_query.message.answer(text, reply_markup=get_main_menu_keyboard())
                await message_or_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await message_or_query.answer()


async def send_agreement_prompt(message: Message, state: FSMContext, user_exists: bool = False):
    greeting_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ Robotiaga Perfumes!\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Å—ã–ª–∫–∞ –Ω–∏–∂–µ) –∏ –ø—Ä–∏–º–∏—Ç–µ –µ–µ —É—Å–ª–æ–≤–∏—è."
    )
    if user_exists:
        greeting_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}!\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –ü–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å (—Å—Å—ã–ª–∫–∞ –Ω–∏–∂–µ) –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö."
        )
    await message.answer(greeting_text, reply_markup=get_agreement_keyboard())
    await state.set_state(UserAgreement.awaiting_agreement)


@user_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, sheet_service: AsyncSheetServiceWithQueue):
    user_id = message.from_user.id
    logger.info(f"User {user_id} ({message.from_user.full_name}) started the bot.")
    await state.clear()

    user_data_list = await sheet_service.read_rows_from_cache("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", filter_criteria={"user_id": user_id})

    if user_data_list:
        user_gsheet_data = user_data_list[0]
        agreement_accepted = bool(user_gsheet_data.get("agreement_accepted_at")) and \
                             str(user_gsheet_data.get("is_active", "")).upper() == "TRUE"

        if agreement_accepted:
            logger.info(f"User {user_id} already accepted agreement. Sending main menu.")
            # –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é
            await send_or_edit_main_menu(message, state, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}! üëã")
        else:
            logger.info(f"User {user_id} exists but has not accepted/active agreement. Prompting again.")
            await send_agreement_prompt(message, state, user_exists=True)
    else:
        logger.info(f"New user {user_id}. Prompting for agreement.")
        await send_agreement_prompt(message, state)


@user_router.callback_query(UserAgreementCallback.filter(F.action == "accept"), UserAgreement.awaiting_agreement)
async def handle_accept_agreement_callback(query: CallbackQuery, state: FSMContext,
                                           sheet_service: AsyncSheetServiceWithQueue):
    user = query.from_user
    logger.info(f"User {user.id} accepted the agreement.")

    user_data_payload = {
        "user_id": user.id,
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "agreement_accepted_at": datetime.datetime.now().isoformat(),
        "is_active": "TRUE"
    }

    existing_user_list = await sheet_service.read_rows_from_cache("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", filter_criteria={"user_id": user.id})

    if existing_user_list:
        update_result = await sheet_service.update_rows(
            sheet_alias="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            filter_criteria={"user_id": user.id},
            new_data_payload=user_data_payload
        )
        if update_result > 0:
            logger.info(f"User {user.id} data update queued/optimistically updated.")
        else:
            logger.error(f"Failed to queue update for user {user.id} data. See sheet_service logs.")
    else:
        created_user = await sheet_service.create_row("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", user_data_payload)
        if created_user:
            logger.info(f"New user {user.id} data queued/optimistically created.")
        else:
            logger.error(f"Failed to queue creation for user {user.id} data. See sheet_service logs.")

    await query.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è.", show_alert=False)
    text_after_agreement = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
    if query.message:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        await query.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await query.message.answer(text_after_agreement, reply_markup=get_main_menu_keyboard())
    else:  # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è callback
        await query.bot.send_message(user.id, text_after_agreement, reply_markup=get_main_menu_keyboard())

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (UserAgreement.awaiting_agreement)


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï/–ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ (Inline) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
@user_router.callback_query(NavigationCallback.filter(F.to == "main_menu"))
async def handle_nav_to_main_menu(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} navigated to main menu.")
    await send_or_edit_main_menu(query, state)
    await query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥" (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞)
# –û–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—É–¥–µ—Ç –≤ catalog/handlers.py
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ catalog_router –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç,
# catalog_router –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ user_router.
# –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É, –∏ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–º/–¥–æ–ø–æ–ª–Ω–∏–º.
# @user_router.callback_query(NavigationCallback.filter(F.to == "catalog"), StateFilter(None))
# async def handle_catalog_button_nav(query: CallbackQuery, state: FSMContext, sheet_service: AsyncSheetServiceWithQueue):
#     logger.info(f"User {query.from_user.id} pressed '–ö–∞—Ç–∞–ª–æ–≥' from main menu.")
#     await state.set_state(CatalogNavigation.choosing_category)
#     # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ catalog/handlers.py
#     # –ù–∞–ø—Ä–∏–º–µ—Ä: await show_categories(query, state, sheet_service)
#     # –ü–æ–∫–∞ —á—Ç–æ:
#     if query.message:
#         await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ö–∞—Ç–∞–ª–æ–≥'. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...", reply_markup=None) # –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
#     await query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
# –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ catalog_handlers.py


@user_router.callback_query(NavigationCallback.filter(F.to == "cart"),
                            StateFilter(None))  # StateFilter(None) - –µ—Å–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
async def handle_cart_button_nav(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} pressed '–ö–æ—Ä–∑–∏–Ω–∞'")
    if query.message:
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ö–æ—Ä–∑–∏–Ω–∞'. –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                                      reply_markup=get_main_menu_keyboard())  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await query.answer()


@user_router.callback_query(NavigationCallback.filter(F.to == "my_orders"), StateFilter(None))
async def handle_my_orders_button_nav(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} pressed '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'")
    if query.message:
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'. –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                                      reply_markup=get_main_menu_keyboard())
    await query.answer()


@user_router.callback_query(NavigationCallback.filter(F.to == "info"), StateFilter(None))
async def handle_info_button_nav(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} pressed '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ'")
    # –¢–ó (3.1.1.3): –ö–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegram. –≠—Ç–æ –±—ã–ª–æ –¥–ª—è Reply.
    # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∏–Ω–ª–∞–π–Ω, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    info_text = "Robotiaga Perfumes - –≤–∞—à –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏.\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: @your_admin_contact\n–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00"
    if query.message:
        await query.message.edit_text(info_text,
                                      reply_markup=get_main_menu_keyboard())  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    await query.answer()


@user_router.callback_query(NavigationCallback.filter(F.to == "help"), StateFilter(None))
async def handle_help_button_nav(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} pressed '–ü–æ–º–æ—â—å'")
    # –¢–ó (7): "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" (–ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç —Å Telegram-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º).
    # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    help_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –º—ã –Ω–∞ —Å–≤—è–∑–∏ —Å 11:00 - 22:00(–Ω—Å–∫), —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! ‚ù§Ô∏è\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @YourAdminUsername"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username
    if query.message:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –ø—É–±–ª–∏—á–Ω—ã–π
        # builder = InlineKeyboardBuilder()
        # builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/YourAdminUsername")
        # builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=NavigationCallback(to="main_menu").pack())
        # await query.message.edit_text(help_text, reply_markup=builder.as_markup())
        await query.message.edit_text(help_text, reply_markup=get_main_menu_keyboard())  # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    await query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å. –î–ª—è –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω–µ–µ –∞–∫—Ç—É–∞–ª–µ–Ω,
# –Ω–æ –º–æ–∂–µ—Ç —Å–ª–æ–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç.
@user_router.message(F.text, StateFilter(None))
async def handle_unknown_text_main_menu(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} sent unknown text '{message.text}' while in main menu (no state).")
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. üëá",
        reply_markup=get_main_menu_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –≤ –æ—Ç–≤–µ—Ç
    )