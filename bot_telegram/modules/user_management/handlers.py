 # bot_telegram/modules/user_management/handlers.py
import logging
import datetime

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.database import AsyncSheetServiceWithQueue, User
from bot_telegram.states.user_interaction_states import UserAgreement
from .keyboards import get_agreement_keyboard, get_main_menu_keyboard, get_view_agreement_keyboard
from bot_telegram.utils.callback_data_factory import UserAgreementCallback
from bot_telegram.bot_config import USER_AGREEMENT_PATH

logger = logging.getLogger(__name__)
user_router = Router()

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ sheet_service –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ router –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ middleware
# –ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ (–Ω–µ –ª—É—á—à–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞)
# –í bot_main.py –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

async def send_agreement_prompt(message: Message, state: FSMContext, user_exists: bool = False):
    greeting_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ Robotiaga Perfumes!\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–∏—Ç–µ –µ–µ —É—Å–ª–æ–≤–∏—è."
    )
    if user_exists:
        greeting_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}!\n"
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –ü–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö."
        )
    await message.answer(greeting_text, reply_markup=get_agreement_keyboard())
    await state.set_state(UserAgreement.awaiting_agreement)

@user_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, sheet_service: AsyncSheetServiceWithQueue):
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot.")
    await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –ø—Ä–∏–Ω—è–ª –ª–∏ –æ–Ω —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    user_data_list = await sheet_service.read_rows_from_cache("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", filter_criteria={"user_id": user_id})

    if user_data_list:
        user_gsheet_data = user_data_list[0]
        # –í –º–æ–¥–µ–ª–∏ is_active –∏ agreement_accepted_at –º–æ–≥—É—Ç –±—ã—Ç—å None –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
        # –∏–ª–∏ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–µ.
        # –î–ª—è GSheet "TRUE" / "FALSE" —Å—Ç—Ä–æ–∫–∏, –∞ agreement_accepted_at - –¥–∞—Ç–∞/–≤—Ä–µ–º—è –∏–ª–∏ –ø—É—Å—Ç–æ
        agreement_accepted = bool(user_gsheet_data.get("agreement_accepted_at")) and \
                             str(user_gsheet_data.get("is_active", "")).upper() == "TRUE"

        if agreement_accepted:
            logger.info(f"User {user_id} already accepted agreement. Sending main menu.")
            await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}! üëã", reply_markup=get_main_menu_keyboard())
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
        else:
            logger.info(f"User {user_id} exists but has not accepted/active agreement. Prompting again.")
            await send_agreement_prompt(message, state, user_exists=True)
    else:
        logger.info(f"New user {user_id}. Prompting for agreement.")
        await send_agreement_prompt(message, state)


@user_router.callback_query(UserAgreementCallback.filter(F.action == "view"), UserAgreement.awaiting_agreement)
async def handle_view_agreement_callback(query: CallbackQuery, state: FSMContext):
    try:
        with open(USER_AGREEMENT_PATH, "r", encoding="utf-8") as f:
            agreement_text = f.read()
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è ~4096 —Å–∏–º–≤–æ–ª–æ–≤.
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–º.
        # –ü–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —É–º–µ—â–∞–µ—Ç—Å—è.
        if len(agreement_text) > 4000: # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
             agreement_text = agreement_text[:4000] + "\n...(–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)..."

        await query.message.edit_text(agreement_text, reply_markup=get_view_agreement_keyboard())
        await query.answer()
    except FileNotFoundError:
        logger.error(f"User agreement file not found at {USER_AGREEMENT_PATH}")
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Error reading user agreement: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.", show_alert=True)


@user_router.callback_query(UserAgreementCallback.filter(F.action == "back_to_options"), UserAgreement.awaiting_agreement)
async def handle_back_to_agreement_options_callback(query: CallbackQuery, state: FSMContext):
    # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    # –ü–æ —Å—É—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    greeting_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {query.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ Robotiaga Perfumes!\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–∏—Ç–µ –µ–µ —É—Å–ª–æ–≤–∏—è."
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ –Ω–æ–≤–æ–µ
    if query.message:
        await query.message.edit_text(greeting_text, reply_markup=get_agreement_keyboard())
    else:
        await query.bot.send_message(query.from_user.id, greeting_text, reply_markup=get_agreement_keyboard())
    await query.answer()


@user_router.callback_query(UserAgreementCallback.filter(F.action == "accept"), UserAgreement.awaiting_agreement)
async def handle_accept_agreement_callback(query: CallbackQuery, state: FSMContext, sheet_service: AsyncSheetServiceWithQueue):
    user = query.from_user
    logger.info(f"User {user.id} accepted the agreement.")

    user_data_payload = {
        "user_id": user.id,
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "agreement_accepted_at": datetime.datetime.now().isoformat(), # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç
        "is_active": "TRUE" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "TRUE" –∫–∞–∫ –≤ –≤–∞—à–µ–π GSheet –º–æ–¥–µ–ª–∏
    }

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    existing_user_list = await sheet_service.read_rows_from_cache("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", filter_criteria={"user_id": user.id})

    if existing_user_list:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_result = await sheet_service.update_rows(
            sheet_alias="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            filter_criteria={"user_id": user.id},
            new_data_payload=user_data_payload
        )
        if update_result > 0:
            logger.info(f"User {user.id} data updated in GSheet.")
        else:
            logger.error(f"Failed to update user {user.id} data in GSheet. Queue ID or error logged in sheet_service.")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        created_user = await sheet_service.create_row("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", user_data_payload)
        if created_user:
            logger.info(f"New user {user.id} data created in GSheet.")
        else:
            logger.error(f"Failed to create user {user.id} data in GSheet. Queue ID or error logged in sheet_service.")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    await query.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è.", show_alert=False)
    if query.message: # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        await query.message.delete_reply_markup()
        await query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.", reply_markup=get_main_menu_keyboard())
    else: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ query.message –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è callback)
        await query.bot.send_message(user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.", reply_markup=get_main_menu_keyboard())

    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
@user_router.message(F.text, lambda msg: msg.text not in ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ", "‚ùì –ü–æ–º–æ—â—å"])
async def handle_unknown_text_commands_main_menu(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ "–≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é" (–Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. üëá", reply_markup=get_main_menu_keyboard())