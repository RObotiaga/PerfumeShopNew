# robotiaga-perfumeshopnew/bot_telegram/modules/catalog/keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict

from bot_telegram.utils.callback_data_factory import NavigationCallback, PaginationCallback
from bot_telegram.bot_config import (
    PRODUCT_STATUS_EMOJI,
    DEFAULT_PRODUCT_EMOJI,
    ITEMS_PER_PAGE, # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
)

def get_categories_keyboard(categories: List[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for category_name in categories:
        builder.row(
            InlineKeyboardButton(
                text=category_name,
                callback_data=NavigationCallback(
                    to="category_selected", category_name=category_name, page=1
                ).pack(),
            )
        )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=NavigationCallback(to="main_menu").pack(),
        )
    )
    return builder.as_markup()


def get_products_in_category_keyboard(
    category_name: str, products_on_page: List[Dict], current_page: int, total_pages: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if not products_on_page:
        builder.row(
            InlineKeyboardButton(text="–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", callback_data="ignore")
        ) # 'ignore' - —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–±—ç–∫
    else:
        for product in products_on_page:
            status_raw = product.get("status", "").lower()
            status_emoji = PRODUCT_STATUS_EMOJI.get(status_raw, DEFAULT_PRODUCT_EMOJI)

            name = product.get("product_name", "N/A")
            price_val = product.get("price_per_unit")
            price_str = (
                f"{price_val:.0f} ‚ÇΩ"
                if isinstance(price_val, (float, int))
                else "–¶–µ–Ω–∞?"
            ) # –£–±—Ä–∞–ª '—Ä—É–±.' –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ (—Å—Ç–∞—Ç—É—Å, –∏–º—è, —Ü–µ–Ω–∞)
            # –í –ø—Ä–∏–º–µ—Ä–µ –µ—â–µ –±—ã–ª–æ quantity_text, –Ω–æ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞ –Ω–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –Ω–µ–≥–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏.
            button_text = f"{status_emoji} {name} - {price_str}"

            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=NavigationCallback(
                        to="product_details", # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–æ–≤–∞—Ä–∞
                        product_id=int(product.get("product_id")),
                        category_for_back=category_name, # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
                        catalog_page_for_back=current_page, # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
                    ).pack(),
                )
            )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        pagination_buttons = []
        if current_page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥.",
                    callback_data=PaginationCallback(
                        action="prev",
                        target_page=current_page - 1,
                        context="catalog_category",
                        category_name=category_name,
                    ).pack(),
                )
            )
        pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}", callback_data="ignore_page_display" # noop
            )
        )
        if current_page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥. ‚û°Ô∏è",
                    callback_data=PaginationCallback(
                        action="next",
                        target_page=current_page + 1,
                        context="catalog_category",
                        category_name=category_name,
                    ).pack(),
                )
            )
        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(
            text="‚è™ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=NavigationCallback(to="catalog").pack(),
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=NavigationCallback(to="main_menu").pack(),
        )
    )
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–ø–æ–∫–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è, –±—É–¥–µ—Ç –≤ product_details)
def get_product_details_placeholder_keyboard(category_name_for_back: str, catalog_page_for_back: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤",
            callback_data=NavigationCallback(
                to="category_selected", # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_name=category_name_for_back,
                page=catalog_page_for_back
            ).pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=NavigationCallback(to="main_menu").pack()
        )
    )
    return builder.as_markup()